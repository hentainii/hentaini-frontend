# Uploader Migration Documentation

## Overview

This document describes the migration of the uploader system to a new architecture that supports multiple services, parallel uploads, and better session management.

## New Architecture

### Components

1. **Main Page (`pages/panel/uploader.vue`)**
   - Unified interface for episode selection and file upload
   - Session history table with real-time progress tracking
   - Retry functionality for failed uploads
   - Automatic episode creation from successful uploads

2. **Upload Manager (`composables/uploader/uploadManager.js`)**
   - Core upload orchestration
   - Parallel upload handling
   - Service-agnostic upload interface
   - Progress tracking and error handling

3. **Utilities**
   - `chunkedUpload.js`: Handles large file uploads in chunks
   - `retryLogic.js`: Implements exponential backoff and retry logic

4. **Service Handlers**
   - `mega.js`: Mega upload implementation
   - `mp4upload.js`: Mp4upload implementation
   - Each handler uses chunked uploads and handles service-specific APIs

## Upload Flow

1. User accesses the uploader page (`/panel/uploader`)
2. User selects an episode using the autocomplete component
3. User selects a video file (MP4 format, max 2GB)
4. System creates an upload session and attempts parallel uploads to all active services
5. Progress is tracked in real-time for each service
6. Failed uploads can be retried individually
7. Successful uploads store their player codes
8. Episode can be created automatically with successful upload codes

## Session Management

### Upload Sessions Table
- Columns:
  - Session ID
  - Episode Info
  - File Name
  - Upload Date
  - Service Status Columns (one per active service)
  - Actions

### Session States
- Each service in a session can be in one of these states:
  - `uploading`: Upload in progress
  - `success`: Upload completed with player code
  - `failed`: Upload failed (with retry option)

## API Integration

### Strapi Endpoints
- `uploader-sessions`: Stores upload session data
  - No `attributes` wrapper in responses
  - Includes episode and series relations
  - Stores service-specific upload results

### Service-specific APIs
- Each service handler communicates with a dedicated backend endpoint:
  - `/mega/upload`: Handles Mega uploads
  - `/mp4upload/upload`: Handles Mp4upload uploads

## Data Structure

### Upload Session
```typescript
interface UploadSession {
  id: number;
  episode: {
    id: number;
    episode_number: number;
    serie: {
      id: number;
      title: string;
    };
  };
  file_name: string;
  started_at: string;
  services: {
    [serviceName: string]: {
      status: 'uploading' | 'success' | 'failed';
      progress: number;
      code?: string;
      error?: string;
    };
  };
}
```

### Player Code
```typescript
interface PlayerCode {
  service: string;
  code: string;
}
```

## Migration Steps

1. ✅ Create new uploader page
2. ✅ Implement upload manager with retry logic
3. ✅ Create chunked upload utility
4. ✅ Implement service handlers
5. ✅ Add session management
6. ✅ Add progress tracking
7. ✅ Implement retry functionality
8. ✅ Add episode creation from successful uploads

## Pending Tasks

1. Add more service handlers:
   - YourUpload
   - VHide
   - STREAM2
   - ok.ru
   - TERA
2. Test the system with large files
3. Add error logging and monitoring
4. Remove old `Main.vue` component once stable

## Security Considerations

1. File validation:
   - MP4 format only
   - 2GB size limit
   - Server-side validation

2. Authentication:
   - Token-based auth for all API calls
   - Service-specific credentials managed by backend

## Error Handling

1. Upload Errors:
   - Network issues: Automatic retry with backoff
   - Service errors: Individual retry per service
   - File errors: Clear error messages to user

2. Session Errors:
   - Failed session creation: Clear error message
   - Failed episode creation: Manual retry option

## Testing Guidelines

1. File Upload:
   - Test with various file sizes
   - Test with invalid file types
   - Test with files at size limit

2. Services:
   - Test parallel uploads
   - Test individual service failures
   - Test retry functionality

3. Session Management:
   - Test session creation
   - Test progress tracking
   - Test episode creation

## Rollback Plan

If issues are encountered:
1. Keep old uploader code accessible
2. Implement feature flag for new uploader
3. Monitor error rates and performance
4. Prepare database rollback scripts if needed